# Step 1: Loading and pre-processing the image data
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import fashion_mnist
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

# Load and preprocess the data
(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

# Normalize pixel values to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0

# Split the training data into training and validation sets
train_images, val_images, train_labels, val_labels = train_test_split(train_images, train_labels, test_size=0.2, random_state=42)

# Step 2: Defining the model’s architecture
model = models.Sequential([
    layers.Flatten(input_shape=(28, 28)),      # Flatten the 28x28 input images
    layers.Dense(128, activation='relu'),       # Fully connected layer with 128 units
    layers.Dropout(0.2),                        # Dropout layer to reduce overfitting
    layers.Dense(10)                            # Output layer with 10 units (for 10 classes)
])

# Step 3: Training the model
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

history = model.fit(train_images, train_labels, epochs=10, validation_data=(val_images, val_labels))

# Step 4: Estimating the model’s performance
test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)
print(f'\nTest accuracy: {test_acc}')

# Plotting the training history
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.show()

make sure to install the required libraries if you haven't already:
pip install tensorflow scikit-learn matplotlib


